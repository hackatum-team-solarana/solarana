/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Bundesland } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { OfferGet } from '../models';
// @ts-ignore
import { OfferPost } from '../models';
/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Offer
         * @param {number | null} [maxAge] 
         * @param {number | null} [maxPrice] 
         * @param {number | null} [minPower] 
         * @param {Bundesland | null} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfferMarketplaceOrderGet: async (maxAge?: number | null, maxPrice?: number | null, minPower?: number | null, region?: Bundesland | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketplace/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxAge !== undefined) {
                localVarQueryParameter['max_age'] = maxAge;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['max_price'] = maxPrice;
            }

            if (minPower !== undefined) {
                localVarQueryParameter['min_power'] = minPower;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Offer
         * @param {OfferPost} offerPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOfferMarketplaceOrderPost: async (offerPost: OfferPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offerPost' is not null or undefined
            assertParamExists('postOfferMarketplaceOrderPost', 'offerPost', offerPost)
            const localVarPath = `/marketplace/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(offerPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Offer
         * @param {number | null} [maxAge] 
         * @param {number | null} [maxPrice] 
         * @param {number | null} [minPower] 
         * @param {Bundesland | null} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOfferMarketplaceOrderGet(maxAge?: number | null, maxPrice?: number | null, minPower?: number | null, region?: Bundesland | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OfferGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOfferMarketplaceOrderGet(maxAge, maxPrice, minPower, region, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MessageApi.getOfferMarketplaceOrderGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Post Offer
         * @param {OfferPost} offerPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOfferMarketplaceOrderPost(offerPost: OfferPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOfferMarketplaceOrderPost(offerPost, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MessageApi.postOfferMarketplaceOrderPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Offer
         * @param {number | null} [maxAge] 
         * @param {number | null} [maxPrice] 
         * @param {number | null} [minPower] 
         * @param {Bundesland | null} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfferMarketplaceOrderGet(maxAge?: number | null, maxPrice?: number | null, minPower?: number | null, region?: Bundesland | null, options?: any): AxiosPromise<Array<OfferGet>> {
            return localVarFp.getOfferMarketplaceOrderGet(maxAge, maxPrice, minPower, region, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Offer
         * @param {OfferPost} offerPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOfferMarketplaceOrderPost(offerPost: OfferPost, options?: any): AxiosPromise<OfferGet> {
            return localVarFp.postOfferMarketplaceOrderPost(offerPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     * 
     * @summary Get Offer
     * @param {number | null} [maxAge] 
     * @param {number | null} [maxPrice] 
     * @param {number | null} [minPower] 
     * @param {Bundesland | null} [region] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public getOfferMarketplaceOrderGet(maxAge?: number | null, maxPrice?: number | null, minPower?: number | null, region?: Bundesland | null, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).getOfferMarketplaceOrderGet(maxAge, maxPrice, minPower, region, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Offer
     * @param {OfferPost} offerPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public postOfferMarketplaceOrderPost(offerPost: OfferPost, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).postOfferMarketplaceOrderPost(offerPost, options).then((request) => request(this.axios, this.basePath));
    }
}

